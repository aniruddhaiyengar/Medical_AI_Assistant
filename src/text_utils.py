import re

def trim_incomplete_sentence(text, pattern="**&**"):
    """
    Trims the text up to the end of the given pattern.

    Parameters:
      text (str): The text to trim.
      pattern (str): The pattern to search for.

    Returns:
      The text trimmed at the pattern's end if found; otherwise, the original text.
    """
    match = re.search(re.escape(pattern), text)
    if match:
        return text[:match.end()].strip()
    return text

def extract_after_pattern(text, pattern1="S: ", pattern2="Please note that"):
    """
    Extracts text starting from the given pattern.

    Parameters:
      text (str): The text to process.
      pattern (str): The pattern to look for (e.g., "S: ").

    Returns:
      The text starting from the pattern if found; otherwise, the original text.
    """
    final_pattern = r"## Final Response\s*(.*)"
    final_match = re.search(re.escape(final_pattern), text, flags=re.DOTALL)
    if not final_match:
        # If not found, return original text
        return text

    return text[final_match.end():].strip()

def extract_reason_response(text):
    """
    Extracts and formats the final response containing the Diagnosis and Recommendations sections
    from the given text. It assumes the final response begins with the marker "## Final Response"
    and that the relevant content is structured as follows:

      ## Final Response
      Diagnosis: <diagnosis details>

      Recommendations: <recommendations details>

    Parameters:
      text (str): The full text output generated by the reasoning model.

    Returns:
      A formatted string with the Diagnosis and Recommendations sections.
    """
    # First, extract the block after "## Final Response"
    final_pattern = r"## Final Response\s*(.*)"
    final_match = re.search(final_pattern, text, flags=re.DOTALL)
    if not final_match:
        # If not found, return original text
        return text

    final_text = final_match.group(1).strip()

    # Extract Diagnosis section: from "Diagnosis:" up to "Recommendations:" or end of text
    diag_pattern = r"Diagnosis:\s*(.*?)(?=\s*Recommendations:|$)"
    diag_match = re.search(diag_pattern, final_text, flags=re.DOTALL)
    diagnosis = diag_match.group(1).strip() if diag_match else ""

    # Extract Recommendations section: from "Recommendations:" to end of text
    rec_pattern = r"Recommendations:\s*(.*)"
    rec_match = re.search(rec_pattern, final_text, flags=re.DOTALL)
    recommendations = rec_match.group(1).strip() if rec_match else ""

    # Format the final output with proper line breaks and headers
    formatted_output = f"Diagnosis: {diagnosis}\n\nRecommendations: {recommendations}"
    return formatted_output